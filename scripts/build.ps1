# ===================================================================
# üî® SCRIPT DE COMPILA√á√ÉO PARA TEMPLATE ABNT LATEX (Windows)
# ===================================================================
# Vers√£o PowerShell do script de compila√ß√£o
# Baseado em melhores pr√°ticas de projetos LaTeX acad√™micos
# ===================================================================

param(
    [Parameter(Position=0)]
    [ValidateSet("build", "compile", "quick", "clean", "watch", "stats", "open", "help")]
    [string]$Action = "build"
)

# Configura√ß√µes
$MainFile = "template\main.tex"
$OutputDir = "output"
$TempDir = "temp"

# Fun√ß√£o para exibir mensagens coloridas
function Write-Step {
    param([string]$Message)
    Write-Host "üî® $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# Fun√ß√£o para limpeza
function Invoke-Cleanup {
    Write-Step "Limpando arquivos tempor√°rios..."
    
    # Remove arquivos tempor√°rios do LaTeX
    $extensions = @("*.aux", "*.log", "*.bbl", "*.blg", "*.fdb_latexmk", 
                   "*.fls", "*.synctex.gz", "*.toc", "*.lof", "*.lot", 
                   "*.out", "*.bcf", "*.run.xml", "*.nav", "*.snm", "*.vrb")
    
    foreach ($ext in $extensions) {
        Get-ChildItem -Recurse -Name $ext | Remove-Item -Force -ErrorAction SilentlyContinue
    }
    
    # Remove diret√≥rio tempor√°rio se existir
    if (Test-Path $TempDir) {
        Remove-Item -Recurse -Force $TempDir
    }
    
    Write-Success "Limpeza conclu√≠da!"
}

# Fun√ß√£o para verificar depend√™ncias
function Test-Dependencies {
    Write-Step "Verificando depend√™ncias..."
    
    if (-not (Get-Command pdflatex -ErrorAction SilentlyContinue)) {
        Write-Error "pdflatex n√£o encontrado! Instale MiKTeX ou TeX Live"
        exit 1
    }
    
    if (-not (Get-Command bibtex -ErrorAction SilentlyContinue)) {
        Write-Warning "bibtex n√£o encontrado! Cita√ß√µes podem n√£o funcionar corretamente"
    }
    
    Write-Success "Depend√™ncias verificadas!"
}

# Fun√ß√£o para compila√ß√£o completa
function Invoke-FullCompile {
    Write-Step "Iniciando compila√ß√£o completa..."
    
    # Cria diret√≥rio de output se n√£o existir
    if (-not (Test-Path $OutputDir)) {
        New-Item -ItemType Directory -Path $OutputDir | Out-Null
    }
    
    # Primeira compila√ß√£o (gera .aux)
    Write-Step "Primeira passada (estrutura)..."
    $result = Start-Process -FilePath "pdflatex" -ArgumentList "-output-directory=$OutputDir", "-interaction=nonstopmode", $MainFile -Wait -PassThru -NoNewWindow
    
    if ($result.ExitCode -ne 0) {
        Write-Error "Erro na primeira compila√ß√£o! Verifique o arquivo .log"
        return $false
    }
    
    # Compila√ß√£o da bibliografia (se existir referencias.bib)
    if (Test-Path "template\referencias.bib") {
        Write-Step "Processando bibliografia..."
        Push-Location $OutputDir
        $result = Start-Process -FilePath "bibtex" -ArgumentList "main" -Wait -PassThru -NoNewWindow
        Pop-Location
        
        if ($result.ExitCode -ne 0) {
            Write-Warning "Erro na compila√ß√£o da bibliografia. Continuando..."
        }
    }
    
    # Segunda compila√ß√£o (resolve refer√™ncias)
    Write-Step "Segunda passada (refer√™ncias)..."
    Start-Process -FilePath "pdflatex" -ArgumentList "-output-directory=$OutputDir", "-interaction=nonstopmode", $MainFile -Wait -NoNewWindow | Out-Null
    
    # Terceira compila√ß√£o (finaliza refer√™ncias cruzadas)
    Write-Step "Terceira passada (finaliza√ß√£o)..."
    $result = Start-Process -FilePath "pdflatex" -ArgumentList "-output-directory=$OutputDir", "-interaction=nonstopmode", $MainFile -Wait -PassThru -NoNewWindow
    
    if ($result.ExitCode -eq 0) {
        Write-Success "Compila√ß√£o conclu√≠da com sucesso!"
        
        # Copia PDF para raiz se existir
        if (Test-Path "$OutputDir\main.pdf") {
            Copy-Item "$OutputDir\main.pdf" "documento_compilado.pdf"
            Write-Success "PDF dispon√≠vel em: documento_compilado.pdf"
        }
        
        return $true
    } else {
        Write-Error "Erro na compila√ß√£o final!"
        return $false
    }
}

# Fun√ß√£o para compila√ß√£o r√°pida
function Invoke-QuickCompile {
    Write-Step "Compila√ß√£o r√°pida..."
    
    if (-not (Test-Path $OutputDir)) {
        New-Item -ItemType Directory -Path $OutputDir | Out-Null
    }
    
    $result = Start-Process -FilePath "pdflatex" -ArgumentList "-output-directory=$OutputDir", "-interaction=nonstopmode", $MainFile -Wait -PassThru -NoNewWindow
    
    if ($result.ExitCode -eq 0) {
        Write-Success "Compila√ß√£o r√°pida conclu√≠da!"
        
        if (Test-Path "$OutputDir\main.pdf") {
            Copy-Item "$OutputDir\main.pdf" "documento_compilado.pdf"
            Write-Success "PDF dispon√≠vel em: documento_compilado.pdf"
        }
        return $true
    } else {
        Write-Error "Erro na compila√ß√£o r√°pida!"
        return $false
    }
}

# Fun√ß√£o para mostrar estat√≠sticas
function Show-Stats {
    if (Test-Path "$OutputDir\main.log") {
        Write-Step "Estat√≠sticas do documento:"
        
        $logContent = Get-Content "$OutputDir\main.log"
        
        # Conta p√°ginas
        $pageMatch = $logContent | Select-String "Output written on.*\((\d+) page"
        if ($pageMatch) {
            $pages = $pageMatch.Matches[0].Groups[1].Value
            Write-Host "üìÑ P√°ginas: $pages"
        }
        
        # Conta warnings e errors
        $warnings = ($logContent | Select-String "Warning").Count
        $errors = ($logContent | Select-String "Error").Count
        
        Write-Host "‚ö†Ô∏è  Warnings: $warnings"
        Write-Host "‚ùå Errors: $errors"
        
        # Informa√ß√µes do PDF se existir
        if (Test-Path "documento_compilado.pdf") {
            $pdfInfo = Get-Item "documento_compilado.pdf"
            Write-Host "üìä Tamanho do arquivo: $([math]::Round($pdfInfo.Length / 1MB, 2)) MB"
        }
    }
}

# Fun√ß√£o para abrir PDF
function Open-PDF {
    if (Test-Path "documento_compilado.pdf") {
        Write-Step "Abrindo PDF..."
        Start-Process "documento_compilado.pdf"
    } else {
        Write-Warning "PDF n√£o encontrado. Execute a compila√ß√£o primeiro."
    }
}

# Fun√ß√£o de ajuda
function Show-Help {
    Write-Host "üî® Script de Compila√ß√£o - Template ABNT LaTeX (Windows)" -ForegroundColor Blue
    Write-Host ""
    Write-Host "Uso: .\build.ps1 [OP√á√ÉO]"
    Write-Host ""
    Write-Host "Op√ß√µes:"
    Write-Host "  build, compile     Compila√ß√£o completa (3 passadas + bibliografia)"
    Write-Host "  quick             Compila√ß√£o r√°pida (1 passada)"
    Write-Host "  clean             Limpar arquivos tempor√°rios"
    Write-Host "  stats             Mostrar estat√≠sticas do documento"
    Write-Host "  open              Abrir PDF compilado"
    Write-Host "  help              Mostrar esta ajuda"
    Write-Host ""
    Write-Host "Exemplos:"
    Write-Host "  .\build.ps1 build          # Compila√ß√£o completa"
    Write-Host "  .\build.ps1 quick          # Compila√ß√£o r√°pida para teste"
    Write-Host "  .\build.ps1 clean          # Limpar antes de commit no Git"
}

# Modo observa√ß√£o (Windows)
function Start-WatchMode {
    Write-Step "Modo observa√ß√£o ativado. Pressione Ctrl+C para sair."
    Write-Warning "Monitorando altera√ß√µes em arquivos .tex e .bib..."
    
    $watcher = New-Object System.IO.FileSystemWatcher
    $watcher.Path = (Get-Location).Path
    $watcher.Filter = "*.*"
    $watcher.IncludeSubdirectories = $true
    $watcher.EnableRaisingEvents = $true
    
    $action = {
        $path = $Event.SourceEventArgs.FullPath
        if ($path -match '\.(tex|bib)$') {
            Write-Step "Arquivo modificado: $path"
            Write-Step "Recompilando..."
            Invoke-QuickCompile
            Write-Host ""
        }
    }
    
    Register-ObjectEvent -InputObject $watcher -EventName "Changed" -Action $action
    
    try {
        while ($true) {
            Start-Sleep 1
        }
    } finally {
        $watcher.Dispose()
    }
}

# Verifica se arquivo principal existe
if (-not (Test-Path $MainFile)) {
    Write-Error "Arquivo principal n√£o encontrado: $MainFile"
    Write-Warning "Certifique-se de estar na raiz do projeto!"
    exit 1
}

# Processa argumentos
switch ($Action) {
    { $_ -in "build", "compile" } {
        Test-Dependencies
        $success = Invoke-FullCompile
        if ($success) { Show-Stats }
    }
    "quick" {
        Test-Dependencies
        Invoke-QuickCompile
    }
    "clean" {
        Invoke-Cleanup
    }
    "watch" {
        Test-Dependencies
        Start-WatchMode
    }
    "stats" {
        Show-Stats
    }
    "open" {
        Open-PDF
    }
    "help" {
        Show-Help
    }
    default {
        Write-Error "Op√ß√£o inv√°lida: $Action"
        Show-Help
        exit 1
    }
}

exit 0 